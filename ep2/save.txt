  "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for i in range(len(new_labels)):\n",
    "    util.array_imshow(new_data[i], new_labels[i])\n",
    "    plt.pause(1)\n",
    "    display.clear_output(wait=True)\n",
    "    display.display(plt.gcf())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Classificação dos dígitos 0, 6 e 9\n",
    "\n",
    "Fiz três classificadores que usam a mesma ideia. Suponha que $w$ e $h$ são as dimensões da imagem, e chame de $r(x,y)$ toda a região retangular de tamanho $d_l\\times d_c$ e posição $(x, y)$. Vou chamar de $\\mu_{x,y}$ a média dos pixels de cada região $r(x,y)$.\n",
    "\n",
    "As diferenças de cada classificador são as restrições.\n",
    "\n",
    "No primeiro (`class_t = 0`):\n",
    "\n",
    "Tomo uma amostra de $m$ imagens e apenas seleciono as regiões que não se sobreponham. Então, para toda posição $(i\\cdot d_l, j\\cdot d_c)$, onde $i=\\{0,\\ldots,\\frac{w}{d_l}\\}$ e $j=\\{0,\\ldots,\\frac{w}{d_c}\\}$, pego as regiões e computo as médias. Para classificar uma imagem, comparo cada média de região das amostras com a da imagem a ser classificada. Então, para cada \\(\\mu_i(x,y)\\) e \\(\\hat{\\mu}(x,y)\\), as médias da i-ésima amostra na região $r(x,y)$ e da imagem a ser classificada, somo:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample_data, sample_label = util.get_samples(data_mnist, label_mnist, size=100)\n",
    "img_w, img_h = 28, 28\n",
    "class_t = 0\n",
    "R = {}\n",
    "\n",
    "def encode(x1, y1, x2, y2):\n",
    "    return ((y1*img_w+x1)*img_w+x2)*img_h+y2\n",
    "def decode(k):\n",
    "    y2 = k%img_h\n",
    "    c = (k-y2)/img_h\n",
    "    x2 = c%img_w\n",
    "    c = (c-x2)/img_w\n",
    "    x1 = c%img_w\n",
    "    y1 = (c-x1)/img_w\n",
    "    return x1, y1, x2, y2\n",
    "\n",
    "def get_index(x1, y1, x2, y2):\n",
    "    return R[encode(x1, y1, x2, y2)]\n",
    "                \n",
    "def get_params(dx, dy, n, min_w=2, min_h=2):\n",
    "    S = {}\n",
    "    if class_t == 0:\n",
    "        for i in range(len(sample_data)):\n",
    "            s = []\n",
    "            d = util.array2img(sample_data[i])\n",
    "            for x in range(0, img_w-dx):\n",
    "                for y in range(0, img_h-dy):\n",
    "                    s.append(np.mean(d[x:x+dx, y:y+dy]))\n",
    "            l = sample_label[i]\n",
    "            if not (l in S):\n",
    "                S[l] = []\n",
    "            S[l].append(s)\n",
    "        return S, dx, dy\n",
    "    elif class_t == 1:\n",
    "        dx, dy = int(img_w/n), int(img_h/n)\n",
    "        for i in range(len(sample_data)):\n",
    "            s = []\n",
    "            d = util.array2img(sample_data[i])\n",
    "            for x in range(0, n-1):\n",
    "                for y in range(0, n-1):\n",
    "                    s.append(np.mean(d[x*dx:(x+1)*dx, y*dy:(y+1)*dy]))\n",
    "                    \n",
    "            l = sample_label[i]\n",
    "            if not (l in S):\n",
    "                S[l] = []\n",
    "            S[l].append(s)\n",
    "        return S, dx, dy, n\n",
    "    else:\n",
    "        m = 0\n",
    "        for x in range(1, img_w):\n",
    "            for y in range(1, img_h):\n",
    "                for a in range(x+min_w, img_w):\n",
    "                    for b in range(y+min_h, img_h):\n",
    "                        x1, y1, x2, y2 = x, y, x+a, y+b\n",
    "                        R[encode(x1, y1, x2, y2)] = m\n",
    "                        m += 1\n",
    "        for i in range(len(sample_data)):\n",
    "            s = []\n",
    "            d = util.array2img(sample_data[i])\n",
    "            for x in range(1, img_w):\n",
    "                for y in range(1, img_h):\n",
    "                    for a in range(x+min_w, img_w):\n",
    "                        for b in range(y+min_h, img_h):\n",
    "                            x1, y1, x2, y2 = x, y, x+a, y+b\n",
    "                            s.append(np.mean(d[x1:x2, y1:y2]))\n",
    "            l = sample_label[i]\n",
    "            if not (l in S):\n",
    "                S[l] = []\n",
    "            S[l].append(s)\n",
    "        return S, m\n",
    "    \n",
    "W = None\n",
    "def initialize_classifier():\n",
    "    if class_t == 0:\n",
    "        S, dx, dy = get_params(2, 2, 14)\n",
    "    elif class_t == 1:\n",
    "        S, dx, dy, nS = get_params(2, 2, 14)\n",
    "else:\n",
    "    S, m = get_params(2, 2, 14, 2, 2)\n",
    "    W = np.full((1, m), 0.01)\n",
    "    W[get_index(0, 0, img_w/2, img_h)] = 0.25\n",
    "    W[get_index(img_w/2, 0, img_w, img_h)] = 0.25\n",
    "    W[get_index(0, 0, img_w, img_h/2)] = 0.25\n",
    "    W[get_index(0, img_h/2, img_w, img_h)] = 0.25\n",
    "    W[get_index(10, 10, 18, 18)] = 0.25\n",
    "\n",
    "def c